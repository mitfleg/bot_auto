from datetime import datetime
import json
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from handlers.db import DataBase


async def getBalance(user_id):
    async with DataBase() as db:
        balance = await db.read("users", ["balance"], where=f"user_id={user_id}")
        return balance[0]["balance"]


def enough_funds(balance, price_per_request):
    return balance >= price_per_request


def insufficient_funds_message(balance, price_per_request):
    msg = "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n"
    msg += "- - - - - - - - - - - - - -\n"
    msg += f"<b>–ë–∞–ª–∞–Ω—Å:</b> <code>{balance:.2f}‚ÇΩ</code>\n"
    msg += f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞:</b> <code>{price_per_request:.2f}‚ÇΩ</code>"
    return msg


def getConfig(key):
    with open("./config.json", "r", encoding="utf8") as f:
        return json.load(f)[f"{key}"]


ADMIN_ID = getConfig('ADMIN')


async def check_rights(user_id):
    async with DataBase() as db:
        query = await db.read('users', ['user_rights'], where="user_id={}".format(user_id))
        return query[0]['user_rights']


async def main_menu_all(message):
    user_id = message.chat.id
    inline_btn_1 = InlineKeyboardButton('‚öôÔ∏è –ê–∫–∫–∞—É–Ω—Ç', callback_data='account')
    inline_btn_2 = InlineKeyboardButton('üÜò –ü–æ–º–æ—â—å', callback_data='help')
    inline_kb1 = InlineKeyboardMarkup().row(inline_btn_1, inline_btn_2)
    msg = 'ü§î <b>–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –±–æ—Ç—É –∑–∞–ø—Ä–æ—Å—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n\n '
    msg += 'üöó <b>–ü–æ–∏—Å–∫ –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ</b> \n'
    msg += '‚îú <code>–û810–†–†123</code> - –ü–æ–∏—Å–∫ –∞–≤—Ç–æ –ø–æ <b>–†–§</b> \n'
    msg += '‚îú <code>XTA21150053965897</code> - –ü–æ–∏—Å–∫ –ø–æ <b>VIN</b> \n'
    msg += '‚îî <code>2222–ù–ù77</code> - –ü–æ–∏—Å–∫ –º–æ—Ç–æ –ø–æ <b>–†–§</b> \n\n'

    if await check_rights(user_id) == 1:
        admin = InlineKeyboardButton(
            'üõ† –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', callback_data='admin')
        help_btn = InlineKeyboardButton(
            'üÜò –í–æ–π—Ç–∏ –≤ —á–∞—Ç', callback_data='chat_help')
        inline_kb1.row(admin, help_btn)
        msg += 'üì± –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n'
        msg += '‚îî –§–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ <code>79850264551</code>\n\n'


    response = {
        "msg": msg,
        "btns": inline_kb1,
    }
    return response


def plural_days(n):
    days = ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π']

    if n % 10 == 1 and n % 100 != 11:
        p = 0
    elif 2 <= n % 10 <= 4 and (n % 100 < 10 or n % 100 >= 20):
        p = 1
    else:
        p = 2
    return str(n) + ' ' + days[p]


def get_month(n):
    month = [
        '—è–Ω–≤–∞—Ä—è',
        '—Ñ–µ–≤—Ä–∞–ª—è',
        '–º–∞—Ä—Ç–∞',
        '–∞–ø—Ä–µ–ª—è',
        '–º–∞—è',
        '–∏—é–Ω—è',
        '–∏—é–ª—è',
        '–∞–≤–≥—É—Å—Ç–∞',
        '—Å–µ–Ω—Ç—è–±—Ä—è',
        '–æ–∫—Ç—è–±—Ä—è',
        '–Ω–æ—è–±—Ä—è',
        '–¥–µ–∫–∞–±—Ä—è',
    ]
    return month[n]


def format_datetime(date_string: str, short=False) -> str:
    date = datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S')
    date = date.replace(hour=(date.hour+3) % 24)
    day = date.strftime('%d')
    month = get_month(int(date.strftime('%m'))-1)
    year = date.strftime('%Y')
    time = date.strftime('%H:%M')
    if short:
        return f"{day} {month} {year}"
    return f"{day} {month} {year} {time}"


def get_grouped_items(history):
    grouped_items = {}
    for item in history:
        date_created = item['date_created'].strftime('%d.%m.%Y')
        if date_created in grouped_items:
            grouped_items[date_created].append(item)
        else:
            grouped_items[date_created] = [item]
    return grouped_items


def format_history_item(item, operation=False):
    time = item['date_created'].strftime('%H:%M')
    if operation:
        request = item['transaction']
        if request[0] == '-':
            request = request[1:]
    else:
        request = f"<code>{item['request'].upper()}</code>"
    return f'{time} - {request}'
